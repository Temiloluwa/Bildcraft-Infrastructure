default:
  image:
    name: hashicorp/terraform:latest
    entrypoint: [""]

variables:
  DEPLOY_BRANCH: "main"
  TF_DATA_DIR: "${CI_PROJECT_DIR}/iac/.terraform"
  TF_CLI_ARGS: "-no-color"
  TF_IN_AUTOMATION: "true"

before_script:
  - cd iac

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - iac/.terraform/
    - iac/.terraform.lock.hcl
  policy: pull
  when: on_success

stages:
  - plan
  - apply

validate:
  stage: .pre
  environment:
    name: Production
  script:
    - terraform init -backend=false
    - terraform validate
  rules:
    - if: $CI_COMMIT_BRANCH

plan:prod:
  stage: plan
  environment:
    name: Production
  script: |
    terraform init
    terraform plan -out=tfplan \
      -var-file=environment/prod-terraform.tfvars \
      -var "account_id=$ACCOUNT_ID"
    terraform show -no-color tfplan > plan.txt
  artifacts:
    paths:
      - tfplan
      - plan.txt
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH

apply:prod:
  stage: apply
  environment:
    name: Production
  dependencies:
    - plan:prod
  script: |
    terraform init
    terraform apply -auto-approve \
      -var-file=environment/prod-terraform.tfvars \
      -var "account_id=$ACCOUNT_ID" \
      tfplan
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEPLOY_BRANCH'
      when: manual

cleanup:
  stage: .post
  environment:
    name: Production
  script:
    - echo "Cleaning up pipeline cache..."
  cache:
    key: "$CI_COMMIT_REF_SLUG"
    paths:
      - iac/.terraform/
      - iac/.terraform.lock.hcl
    policy: pull
    when: always
  rules:
    - when: always